buildscript {
    ext {
        grailsVersion = project.grailsVersion
    }
    repositories {
        mavenLocal()
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath "com.bertramlabs.plugins:asset-pipeline-gradle:2.14.2"
        // 3.2
        // classpath 'org.grails.plugins:hibernate5:6.1.4'
    }
}

// standard
apply plugin: "eclipse"
apply plugin: "idea"
apply plugin: "org.grails.grails-plugin"
// apply plugin: "org.grails.grails-plugin-publish"
apply plugin: "asset-pipeline"
apply plugin: "org.grails.grails-gsp"
// extra
apply plugin: "application"
apply plugin: 'maven'
apply plugin: 'signing'


version "3.3.17.15" // added primary variant to product form
group "net.codebuilders"
description 'MyBusiness - a Grails 3.3 plugin for E-Commerce'
mainClassName = 'net.codebuilders.mybusiness.Application'

// ext.isReleaseVersion = !version.endsWith("SNAPSHOT") // used to not pgp sign snapshots

ext {
    grailsVersion = project.grailsVersion
    gradleWrapperVersion = project.gradleWrapperVersion
    // isReleaseVersion = !version.endsWith("SNAPSHOT") // used to not pgp sign snapshots
    isReleaseVersion = false  // until we fix signing
}

repositories {
    mavenLocal()
    maven { url "https://repo.grails.org/grails/core" }
    maven { url "http://dl.bintray.com/stefanogualdi/plugins" } // ckeditor
    maven { url "http://dl.bintray.com/lgrignon/plugins" } // hibernate search
    maven { url "https://dl.bintray.com/cmarcum/maven/" } // our grails-paypal
}

dependencyManagement {
    imports {
        mavenBom "org.grails:grails-bom:$grailsVersion"
    }
    applyMavenExclusions false
}

// only used for multi-project build
// normally added in dependencies block/
// added here for hot reloads
// use dependency block for building releases
/*
grails {
    plugins {
        compile project(':grails-paypal')
    }
}
*/

dependencies {
    // standard 3.3 plugin
    compile "org.springframework.boot:spring-boot-starter-logging"
    compile "org.springframework.boot:spring-boot-autoconfigure"
    compile "org.grails:grails-core"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-starter-tomcat"
    compile "org.grails:grails-web-boot"
    compile "org.grails:grails-logging"
    compile "org.grails:grails-plugin-rest"
    compile "org.grails:grails-plugin-databinding"
    compile "org.grails:grails-plugin-i18n"
    compile "org.grails:grails-plugin-services"
    compile "org.grails:grails-plugin-url-mappings"
    compile "org.grails:grails-plugin-interceptors"
    compile "org.grails.plugins:cache"
    compile "org.grails.plugins:async"
    compile "org.grails.plugins:scaffolding"
    compile "org.grails.plugins:gsp"
    console "org.grails:grails-console"
    profile "org.grails.profiles:web-plugin"
    provided "org.grails:grails-plugin-services"
    provided "org.grails:grails-plugin-domain-class"
    runtime "com.bertramlabs.plugins:asset-pipeline-grails:2.14.2"
    testCompile "org.grails:grails-gorm-testing-support"
    // testCompile "org.grails:grails-plugin-testing"
    testCompile "org.grails.plugins:geb"
    testCompile "org.grails:grails-web-testing-support"
    testRuntime "org.seleniumhq.selenium:selenium-htmlunit-driver:2.47.1"
    testRuntime "net.sourceforge.htmlunit:htmlunit:2.18"
    
    // end standard - begin custom
    compile 'org.grails.plugins:spring-security-core:3.2.3'
    compile "org.grails.plugins:recaptcha:3.2.0"
    compile 'org.grails.plugins:mail:2.0.0'

    // ckeditor
    compile "org.grails.plugins:ckeditor:4.5.9.0"

    // feeds
    compile 'rome:rome:1.0'
    compile 'rome:modules:0.3.2'

    // ajax tags like formRemote that were deprecated in 2.4
    compile 'org.grails.plugins:ajax-tags:1.0.0'

    // for adding seed data since bootstrap.groovy doesn't run
    compile 'com.bertramlabs.plugins:seed-me:3.3.1'

    // for uploading images in bootstrap
    compile group: 'org.springframework', name: 'spring-test', version: '5.1.8.RELEASE'

    // for attaching photos to domains
    compile 'com.bertramlabs.plugins:selfie:1.2.9'

    // for using karman-aws for photos etc.
    compile 'com.bertramlabs.plugins:karman-aws:1.2.1'

    // for paypal
    compile 'net.codebuilders:grails-paypal:3.3.2'

    // for hibernate search
    compile("org.grails.plugins:hibernate-search:2.3.0")
    compile("org.grails.plugins:hibernate5:6.1.8")
    compile("org.hibernate:hibernate-core:5.2.10.Final")
    compile("org.hibernate:hibernate-ehcache:5.2.10.Final")

    // find out who uses me...
    // compile "org.grails:grails-datastore-gorm-async:6.1.12.RELEASE" // last before 7.0

    // for excel import - not yet used
    // compile 'org.grails.plugins:excel-import:3.0.0' // grails 3.2 - 3.0.1 didn't work

    // for openoffice
    compile "net.codebuilders:juh:4.1.6"
    compile "net.codebuilders:ridl:4.1.6"
    compile "net.codebuilders:unoil:4.1.6"
    compile "net.codebuilders:jurt:4.1.6"
    compile "net.codebuilders:bootstrap-connector:4.1.6.0"
    compile "net.codebuilders:guno-extension:4.1.6.10"
    
}


sourceCompatibility = 1.8
targetCompatibility = 1.8


task wrapper(type: Wrapper) {
    gradleVersion = gradleWrapperVersion
}

/*
grailsPublish {
    // TODO: Provide values here
    user = 'user'
    key = 'key'
    githubSlug = 'foo/bar'
    license {
        name = 'Apache-2.0'
    }
    title = "My Plugin"
    desc = "Full plugin description"
    developers = [johndoe: "John Doe"]
    portalUser = ""
    portalPassword = ""
}
*/

assets {
    packagePlugin = true
}

// exclude assets that are already present in main app
jar {
    exclude "**/META-INF/assets/**"
    exclude "**/META-INF/assets.list"
}

groovydoc {
    docTitle = "MyBusiness Plugin API"
    header = "Code Builders, LLC" // doesn't seem to work
    footer = "Generated documentation ${version}"
    windowTitle = docTitle
    use = true // create class and package usage pages
}

archivesBaseName = 'mybusiness'

signing {
    // only pgp sign if not a snapshot and we are uploading to maven repo
    // required { isReleaseVersion && gradle.taskGraph.hasTask("uploadArchives") }
    required { isReleaseVersion }
    sign configurations.archives
}

uploadArchives.repositories.mavenDeployer {
    // pgp sign the pom file also
    // beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

    configuration = configurations.archives


    // examples:
    // url: "file://localhost/tmp/myRepo/"
    // url: "https://repository.apache.org/service/local/staging/deploy/maven2/" // Apache Nexus
    // url: "http://oss.sonatype.org/service/local/staging/deploy/maven2/"
    // url: "file://$buildDir/myRepo/" // local build directory
    repository(url: "file://$buildDir/myRepo/") {
        // (userName: mavenUser, password: mavenPassword)
    }

    // pom.project
    pom.project {
        name 'MyBusiness Plugin API'
        packaging 'jar'
        description 'MyBusiness - a Grails 3.3 plugin for E-Commerce'
        url 'http://codebuilders.net'
        inceptionYear '2016'

        scm {
            url 'https://github.com/cbmarcum/mybusiness'
            developerConnection 'https://github.com/cbmarcum/mybusiness'
            connection 'https://github.com/cbmarcum/mybusiness'
        }

        licenses {
            license {
                name 'The Apache Software License, Version 2.0'
                url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                distribution 'repo'
            }
        }

        developers {
            developer {
                name 'Carl Marcum'
                email 'carl.marcum@codebuilders.net'
                url 'http://codebuilders.net'
                // see: http://www.mail-archive.com/user@gradle.codehaus.org/msg05368.html
                // organization 'Code Builders, LLC'
                organization = 'Code Builders, LLC' // <-- note we use assignment here
                organizationUrl 'http://codebuilders.net'

            }
        }
    }

}


groovydoc.mustRunAfter clean
jar.mustRunAfter groovydoc

groovydoc.dependsOn clean
jar.dependsOn groovydoc

// custom tasks for creating source/javadoc jars
task mySourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}
/*
task myCopyResources(type: Copy, dependsOn: groovydoc) {
    into groovydoc.destinationDir
    from sourceSets.main.resources
}

task myGroovydocJar(type: Jar, dependsOn: myCopyResources) {
    classifier = 'javadoc'
    from groovydoc.destinationDir
}
*/
task myGroovydocJar(type: Jar, dependsOn: groovydoc) {
    classifier = 'javadoc'
    from groovydoc.destinationDir
}

// add groovydoc/source jar tasks as artifacts
artifacts {
    archives mySourcesJar
    archives myGroovydocJar
}

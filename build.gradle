/* build with:
* ./gradlew publish
* or:
* ./gradlew publishToMavenLocal
*
* to update this wrapper version
* $ gradle wrapper --gradle-version 5.6.4 --distribution-type all
*/

buildscript {
    repositories {
        // mavenLocal()
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath "com.bertramlabs.plugins:asset-pipeline-gradle:3.0.10"
        // geb
        classpath "gradle.plugin.com.energizedwork.webdriver-binaries:webdriver-binaries-gradle-plugin:$webdriverBinariesVersion"
    }
}

// standard
apply plugin: "eclipse"
apply plugin: "idea"
apply plugin: "org.grails.grails-plugin"
// apply plugin: "org.grails.grails-plugin-publish"
apply plugin: "asset-pipeline"
apply plugin: "org.grails.grails-gsp"
// extra
apply plugin: "application"
apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: "com.energizedwork.webdriver-binaries" // geb


version "4.0.19.0" // grails 4.0 upgrade
group "net.codebuilders"
description 'MyBusiness - a Grails 4.0 plugin for E-Commerce'
mainClassName = 'net.codebuilders.mybusiness.Application'

// ext.isReleaseVersion = !version.endsWith("SNAPSHOT") // used to not pgp sign snapshots

ext {
    // test removing these 2 for grails 4
    // grailsVersion = project.grailsVersion
    // gradleWrapperVersion = project.gradleWrapperVersion
    isReleaseVersion = !version.endsWith("SNAPSHOT") // used to not pgp sign snapshots
    // isReleaseVersion = false  // until we fix signing
}

repositories {
    // mavenLocal()
    maven { url "https://repo.grails.org/grails/core" }
    maven { url "http://dl.bintray.com/stefanogualdi/plugins" } // ckeditor
    maven { url "http://dl.bintray.com/lgrignon/plugins" } // hibernate search
    maven { url "https://dl.bintray.com/cmarcum/maven/" } // our grails-paypal
}

// new block for grails 4
configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

dependencyManagement {
    imports {
        mavenBom "org.grails:grails-bom:$grailsVersion"
    }
    applyMavenExclusions false
}

// only used for multi-project build
// normally added in dependencies block/
// added here for hot reloads
// use dependency block for building releases
/*
grails {
    plugins {
        compile project(':grails-paypal')
    }
}
*/

dependencies {
    // standard 4.0 plugin
    developmentOnly("org.springframework.boot:spring-boot-devtools")
    compile "org.springframework.boot:spring-boot-starter-logging"
    compile "org.springframework.boot:spring-boot-autoconfigure"
    compile "org.grails:grails-core"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-starter-tomcat"
    compile "org.grails:grails-web-boot"
    compile "org.grails:grails-logging"
    compile "org.grails:grails-plugin-rest"
    compile "org.grails:grails-plugin-databinding"
    compile "org.grails:grails-plugin-i18n"
    compile "org.grails:grails-plugin-services"
    compile "org.grails:grails-plugin-url-mappings"
    compile "org.grails:grails-plugin-interceptors"
    compile "org.grails.plugins:cache"
    compile "org.grails.plugins:async"
    compile "org.grails.plugins:scaffolding"
    compile "org.grails.plugins:gsp"
    compileOnly "io.micronaut:micronaut-inject-groovy"
    console "org.grails:grails-console"
    profile "org.grails.profiles:web-plugin"
    runtime "com.bertramlabs.plugins:asset-pipeline-grails:3.0.10"
    testCompile "io.micronaut:micronaut-inject-groovy"
    testCompile "org.grails:grails-gorm-testing-support"
    testCompile "org.mockito:mockito-core"
    testCompile "org.grails:grails-web-testing-support"

    // end standard - begin custom
    compile 'org.grails.plugins:spring-security-core:4.0.3'
    compile "org.grails.plugins:recaptcha:3.2.0"
    compile 'org.grails.plugins:mail:3.0.0'

    // ckeditor
    compile "org.grails.plugins:ckeditor:4.5.9.0"

    // feeds (Atom/RSS Java Utilities)
    // compile group: 'com.rometools', name: 'rome', version: '1.15.0'
    compile 'com.rometools:rome:1.15.0'
    // compile group: 'com.rometools', name: 'rome-modules', version: '1.15.0'
    compile 'com.rometools:rome-modules:1.15.0'

    // ajax tags like formRemote that were deprecated in 2.4
    compile 'org.grails.plugins:ajax-tags:1.0.0'

    // for adding seed data since bootstrap.groovy doesn't run
    compile 'com.bertramlabs.plugins:seed-me:4.0.0'

    // for uploading images in bootstrap
    compile group: 'org.springframework', name: 'spring-test', version: '5.2.9.RELEASE'

    // for attaching photos to domains
    compile 'com.bertramlabs.plugins:selfie:2.1.3'

    // for using karman-aws for photos etc.
    compile 'com.bertramlabs.plugins:karman-aws:1.5.1'


    // for paypal
    compile 'net.codebuilders:grails-paypal:3.3.2'


    // for hibernate search
    compile "org.grails.plugins:hibernate-search:2.3.0"
    // compile "org.grails.plugins:hibernate5:6.1.8"
    compile "org.grails.plugins:hibernate5"
    compile "org.hibernate:hibernate-core:5.2.10.Final"
    compile "org.hibernate:hibernate-ehcache:5.2.10.Final"
    // see https://github.com/mathpere/grails-hibernate-search-plugin/issues/45
    compile "org.hibernate:hibernate-search-orm:5.11.4.Final"

    // find out who uses me...
    // compile "org.grails:grails-datastore-gorm-async:6.1.12.RELEASE" // last before 7.0

    // for excel import - not yet used
    // compile 'org.grails.plugins:excel-import:3.0.0' // grails 3.2 - 3.0.1 didn't work

    // for openoffice
    compile "net.codebuilders:juh:4.1.6"
    compile "net.codebuilders:ridl:4.1.6"
    compile "net.codebuilders:unoil:4.1.6"
    compile "net.codebuilders:jurt:4.1.6"
    compile "net.codebuilders:bootstrap-connector:4.1.6.0"
    compile "net.codebuilders:guno-extension:4.1.6.10"

    // for geb
    testCompile "org.grails.plugins:geb"
    testRuntime "org.seleniumhq.selenium:selenium-chrome-driver:$seleniumVersion"
    testRuntime "org.seleniumhq.selenium:selenium-firefox-driver:$seleniumVersion"
    testRuntime "org.seleniumhq.selenium:selenium-safari-driver:$seleniumSafariDriverVersion"
    testCompile "org.seleniumhq.selenium:selenium-remote-driver:$seleniumVersion"
    testCompile "org.seleniumhq.selenium:selenium-api:$seleniumVersion"
    testCompile "org.seleniumhq.selenium:selenium-support:$seleniumVersion"

}

// test if needed for grails 4.0
sourceCompatibility = 1.8
targetCompatibility = 1.8

bootRun {
    ignoreExitValue true
    jvmArgs(
            '-Dspring.output.ansi.enabled=always',
            '-noverify',
            '-XX:TieredStopAtLevel=1',
            '-Xmx1024m')
    sourceResources sourceSets.main
    String springProfilesActive = 'spring.profiles.active'
    systemProperty springProfilesActive, System.getProperty(springProfilesActive)
}

tasks.withType(GroovyCompile) {
    configure(groovyOptions) {
        forkOptions.jvmArgs = ['-Xmx1024m']
    }
}

// enable if you wish to package this plugin as a standalone application
bootJar.enabled = false

/*
grailsPublish {
    // TODO: Provide values here
    user = 'user'
    key = 'key'
    githubSlug = 'foo/bar'
    license {
        name = 'Apache-2.0'
    }
    title = "My Plugin"
    desc = "Full plugin description"
    developers = [johndoe:"John Doe"]
}
*/

// custom for mybusiness below here...

assets {
    packagePlugin = true
}

// exclude assets that are already present in main app
jar {
    exclude "**/META-INF/assets/**"
    exclude "**/META-INF/assets.list"
}

groovydoc {
    docTitle = "MyBusiness Plugin API"
    header = "Code Builders, LLC" // doesn't seem to work
    footer = "Generated documentation ${version}"
    windowTitle = docTitle
    use = true // create class and package usage pages
}

archivesBaseName = 'mybusiness'

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'mybusiness'
            from components.java

            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = 'MyBusiness Plugin API'
                packaging = 'jar'
                description = 'MyBusiness - a Grails 3.3 plugin for E-Commerce'
                url = 'http://codebuilders.net'
                inceptionYear = '2016'

                scm {
                    url = 'https://github.com/cbmarcum/mybusiness'
                    developerConnection = 'https://github.com/cbmarcum/mybusiness'
                    connection = 'https://github.com/cbmarcum/mybusiness'
                }

                licenses {
                    license {
                        name = 'The Apache Software License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution = 'repo'
                    }
                }

                developers {
                    developer {
                        name = 'Carl Marcum'
                        email = 'carl.marcum@codebuilders.net'
                        url = 'http://codebuilders.net'
                        organization = 'Code Builders, LLC'
                        organizationUrl = 'http://codebuilders.net'

                    }
                }
            }
        }
    }

    repositories {
        maven {
            // change URLs to point to your repos, e.g. http://my.org/repo
            def releasesRepoUrl = "$buildDir/repos/releases"
            def snapshotsRepoUrl = "$buildDir/repos/snapshots"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
        }
    }
}

// credentials in .gradle
signing {
    // only pgp sign if not a snapshot and we are uploading to maven repo
    required { isReleaseVersion }
    sign publishing.publications.mavenJava
    sign configurations.archives
}

generatePomFileForMavenJavaPublication.mustRunAfter clean

groovydoc.mustRunAfter clean
jar.mustRunAfter groovydoc

groovydoc.dependsOn clean
jar.dependsOn groovydoc

// custom tasks for creating source/javadoc jars
task mySourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}
/*
task myCopyResources(type: Copy, dependsOn: groovydoc) {
    into groovydoc.destinationDir
    from sourceSets.main.resources
}

task myGroovydocJar(type: Jar, dependsOn: myCopyResources) {
    classifier = 'javadoc'
    from groovydoc.destinationDir
}
*/
task myGroovydocJar(type: Jar, dependsOn: groovydoc) {
    classifier = 'javadoc'
    from groovydoc.destinationDir
}

// add groovydoc/source jar tasks as artifacts
artifacts {
    archives mySourcesJar
    archives myGroovydocJar
}

// geb
webdriverBinaries {
    chromedriver "$chromeDriverVersion"
    geckodriver "$geckodriverVersion"
}

tasks.withType(Test) {
    systemProperty "geb.env", System.getProperty('geb.env')
    systemProperty "geb.build.reportsDir", reporting.file("geb/integrationTest")
    systemProperty "webdriver.chrome.driver", System.getProperty('webdriver.chrome.driver')
    systemProperty "webdriver.gecko.driver", System.getProperty('webdriver.gecko.driver')
}
